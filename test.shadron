#include <math_constants>
#include <debug>
#include <dither>
#include <blending>
#include <shapes>

image Gravestone = file("gravestone.png") :filter(nearest);


parameter float intensity = 0.3 : range(0.3, 0.9);


const vec4 WHITE = vec4( 1, 1, 1, 1);
const vec4 BLACK = vec4( 0, 0, 0, 1);
const vec4 BLUE = vec4( 0, 0, 1, 1);


const int sides = 36 * 16;
const ivec2 SIZE = vec2(sides, sides);

glsl bool should_print_at_offset(vec2 position, float val, ivec2 offset) {
    ivec2 test_pos = ivec2(shadron_Dimensions*position);
    return printValue(val, test_pos/2 - offset);
};

glsl bool should_print_mouse_x(vec2 position) {
    return should_print_at_offset( position, shadron_Mouse.x, ivec2(80.5, 0));
};

glsl bool should_print_mouse_y(vec2 position) {
    return should_print_at_offset( position, shadron_Mouse.y, ivec2(80.5, 25));
};

glsl bool should_print_mouse_z(vec2 position) {
    return should_print_at_offset( position, shadron_Mouse.z, ivec2(80.5, 50));
};

glsl vec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3333333333333333) * direction;
  color += texture2D(image, uv) * 0.29411764705882354;
  color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;
  color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;
  return color; 
}

glsl vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.411764705882353) * direction;
  vec2 off2 = vec2(3.2941176470588234) * direction;
  vec2 off3 = vec2(5.176470588235294) * direction;
  color += texture2D(image, uv) * 0.1964825501511404;
  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;
  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;
  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;
  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;
  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;
  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;
  return color;
}

parameter float blur_x = 0.3 : range(0.3, 0.9);
parameter float blur_y  = 0.3 : range(0.3, 0.9);

glsl vec4 drawRectAndPrintMouseCoords(vec2 position) {
    return blur13(Gravestone, position, SIZE, vec2(blur_x, blur_y));
}

// The generated cubemap
image Test = glsl(drawRectAndPrintMouseCoords, SIZE);
